package com.quanlykhoahoc.GUI;

import com.quanlykhoahoc.BUS.OnsiteCourseBUS;
import com.quanlykhoahoc.DTO.CourseDTO;
import com.quanlykhoahoc.DTO.CourseInstructorDTO;
import com.quanlykhoahoc.DTO.DepartmentDTO;
import com.quanlykhoahoc.DTO.OnlineCourseDTO;
import com.quanlykhoahoc.DTO.OnsiteCourseDTO;
import static com.quanlykhoahoc.GUI.OnlineCourseGUI.isNumeric;

import java.awt.*;
import java.time.LocalTime;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class OnsiteCourseGUI extends javax.swing.JPanel {
    private OnsiteCourseBUS onsiteCourseBUS = new OnsiteCourseBUS();

    /**
     * Creates new form OnsiteCourse
     */
    public OnsiteCourseGUI() {
        initComponents();
        showTableData();
        populateDepartmentNameComboBox();
    }

    private boolean isNullOrEmptyString(String str) {
        return str == null || str.trim().isEmpty();
    }

    public static boolean isNumeric(String str) {
        try {
            Double.parseDouble(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private void populateDepartmentNameComboBox() {
        ArrayList<DepartmentDTO> departments = onsiteCourseBUS.getDepartments();
        for (DepartmentDTO department : departments) {
            cbbDepartment.addItem(department);
        }
        cbbDepartment.setRenderer(new DepartmentComboBoxRender());
    }

    private void changeTableHeight(JTable table) {
        int rowHeight = table.getRowHeight();
        int numRows = table.getRowCount();
        int height = numRows * rowHeight;
        table.setPreferredSize(new Dimension(table.getPreferredSize().width, height));
    }

    private void showTableData() {
        DefaultTableModel model = (DefaultTableModel) tableOnsiteCourseGUI.getModel();
        model.setRowCount(0);
        ArrayList<OnsiteCourseDTO> OnsiteCourses = onsiteCourseBUS.getOnsiteCourses();

        for (OnsiteCourseDTO onsiteCourse : OnsiteCourses) {
            Object[] row = onsiteCourse.toObject();
            model.addRow(row);
        }
        changeTableHeight(tableOnsiteCourseGUI);
    }
    
    private void showTableData(ArrayList<OnsiteCourseDTO> onsiteCourses) {
        DefaultTableModel model = (DefaultTableModel) tableOnsiteCourseGUI.getModel();
        model.setRowCount(0);
        for (OnsiteCourseDTO onsiteCourse : onsiteCourses) {
            Object[] row = onsiteCourse.toObject();
            model.addRow(row);
        }
        changeTableHeight(tableOnsiteCourseGUI);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableOnsiteCourseGUI = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtTitle = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtCredits = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cbbDepartment = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        txtLocation = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtDays = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        spnHour = new javax.swing.JSpinner();
        spnMinutes = new javax.swing.JSpinner();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 102, 102));
        jPanel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

        jLabel1.setBackground(new java.awt.Color(153, 255, 255));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("ONSITE COURSE");
        jPanel1.add(jLabel1);

        tableOnsiteCourseGUI.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Course ID", "Title ", "Credits", "Department ", "Location", "Days", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        for(int x=0; x <7; x++){
            tableOnsiteCourseGUI.getColumnModel().getColumn(x).setCellRenderer( centerRenderer );
        }
        tableOnsiteCourseGUI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableOnClick(evt);
            }
        });
        jScrollPane2.setViewportView(tableOnsiteCourseGUI);

        jPanel2.setBackground(new java.awt.Color(167, 47, 76));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 15, 5));

        btnAdd.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddOnClick(evt);
            }
        });
        jPanel2.add(btnAdd);

        btnUpdate.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditOnClick(evt);
            }
        });
        jPanel2.add(btnUpdate);

        txtSearch.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        txtSearch.setPreferredSize(new java.awt.Dimension(175, 26));
        jPanel2.add(txtSearch);

        btnSearch.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchOnClick(evt);
            }
        });
        jPanel2.add(btnSearch);

        btnDelete.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteOnClick(evt);
            }
        });
        jPanel2.add(btnDelete);

        btnReset.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetOnClick(evt);
            }
        });
        jPanel2.add(btnReset);

        jPanel3.setBackground(new java.awt.Color(255, 204, 204));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel2.setText("Title Course:");

        txtTitle.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        txtTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTitleActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel3.setText("Credits:");

        txtCredits.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel4.setText("Department:");

        cbbDepartment.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        cbbDepartment.setToolTipText("");
        cbbDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbDepartmentActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel5.setText("Location:");

        txtLocation.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel6.setText("Days:");

        txtDays.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        txtDays.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDaysActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel7.setText("Time:");

        spnHour.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        spnMinutes.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbbDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDays, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(119, 119, 119)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(32, 32, 32))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtLocation)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(spnHour, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(spnMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtCredits))
                .addGap(91, 91, 91))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtCredits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbbDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(spnHour, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(spnMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtDaysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDaysActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDaysActionPerformed

    private void cbbDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbDepartmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbDepartmentActionPerformed

    private void btnDeleteOnClick(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteOnClick
        int selectedRow = tableOnsiteCourseGUI.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete",
                    "Error message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int courseId = (int) tableOnsiteCourseGUI.getValueAt(selectedRow, 0);
        boolean success = onsiteCourseBUS.delete(courseId);
        if (success) {
            JOptionPane.showMessageDialog(this, "Successfully deleted a row.");
            showTableData();
            return;
        }
        JOptionPane.showMessageDialog(this, "Failed to delete a row");
            
    }//GEN-LAST:event_btnDeleteOnClick

    private void txtTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTitleActionPerformed

    private void btnAddOnClick(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddOnClick
        String title = txtTitle.getText();
        String credits = txtCredits.getText();
        String location = txtLocation.getText();
        String days = txtDays.getText();

        if (isNullOrEmptyString(title)) {
            JOptionPane.showMessageDialog(this,
                    "The title field cannot be empty.",
                    "Error message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (isNullOrEmptyString(credits)) {
            JOptionPane.showMessageDialog(this,
                    "The credits field cannot be empty.",
                    "Error message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (isNullOrEmptyString(location)) {
            JOptionPane.showMessageDialog(this,
                    "The location field cannot be empty.",
                    "Error message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (isNullOrEmptyString(days)) {
            JOptionPane.showMessageDialog(this,
                    "The days field cannot be empty.",
                    "Error message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!isNumeric(credits)) {
            JOptionPane.showMessageDialog(this,
                    "The credits field only accept number.",
                    "Error message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int creditsS = Integer.parseInt(credits);
        int hours = (int) spnHour.getValue();
        int minutes = (int) spnMinutes.getValue();
        LocalTime time = LocalTime.of(hours, minutes);
        DepartmentDTO department = (DepartmentDTO) cbbDepartment.getSelectedItem();
        CourseDTO course = new CourseDTO(-1, title, creditsS, department);
        OnsiteCourseDTO onsiteCourse = new OnsiteCourseDTO(course, location, days, time);
        
        boolean success = onsiteCourseBUS.addOnsiteCourse(onsiteCourse);
        if (success) {
            JOptionPane.showMessageDialog(this, "Successfully added 1 row.");
            showTableData();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to add 1 row.");
        }
    }//GEN-LAST:event_btnAddOnClick

    private void btnEditOnClick(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditOnClick
        String title = txtTitle.getText();
        String credits = txtCredits.getText();
        String location = txtLocation.getText();
        String days = txtDays.getText();
        
        int selectedRow = tableOnsiteCourseGUI.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please choose a row to edit.",
                    "Error message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int courseId = (int) tableOnsiteCourseGUI.getValueAt(selectedRow, 0);

        if (isNullOrEmptyString(title)) {
            JOptionPane.showMessageDialog(this,
                    "The title field cannot be empty.",
                    "Error message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (isNullOrEmptyString(credits)) {
            JOptionPane.showMessageDialog(this,
                    "The credits field cannot be empty.",
                    "Error message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (isNullOrEmptyString(days)) {
            JOptionPane.showMessageDialog(this,
                    "The days field cannot be empty.",
                    "Error message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (isNullOrEmptyString(location)) {
            JOptionPane.showMessageDialog(this,
                    "The url field cannot be empty.",
                    "Error message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!isNumeric(credits)) {
            JOptionPane.showMessageDialog(this,
                    "The credits field only accept number.",
                    "Error message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int creditsS = Integer.parseInt(credits);
        int hours = (int) spnHour.getValue();
        int minutes = (int) spnMinutes.getValue();
        LocalTime times = LocalTime.of(hours, minutes);
        DepartmentDTO department = (DepartmentDTO) cbbDepartment.getSelectedItem();
        CourseDTO course = new CourseDTO(courseId, title, creditsS, department);
        OnsiteCourseDTO onsiteCourse = new OnsiteCourseDTO(course, location, days, times);
        boolean success = onsiteCourseBUS.update(onsiteCourse);
        if (success) {
            JOptionPane.showMessageDialog(this, "Successfully update a row.");
            showTableData();
            return;
        }
        JOptionPane.showMessageDialog(this, "Failed to update a row.");
    }//GEN-LAST:event_btnEditOnClick

    private void btnSearchOnClick(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchOnClick
        String name = txtSearch.getText();

        if (isNullOrEmptyString(name)) {
            JOptionPane.showMessageDialog(this, "Please enter name to search.",
                    "Error message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        showTableData(onsiteCourseBUS.findByName(name));
    }//GEN-LAST:event_btnSearchOnClick

    private void btnResetOnClick(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetOnClick
        txtTitle.setText(null);
        txtCredits.setText(null);
        txtLocation.setText(null);
        txtDays.setText(null);
        txtSearch.setText(null);
        spnHour.setValue(0);
        spnMinutes.setValue(0);
        showTableData();   
               
    }//GEN-LAST:event_btnResetOnClick

    private void tableOnClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableOnClick
        int selectedRow = tableOnsiteCourseGUI.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please choose a row to edit.",
                    "Error message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String title = (String) tableOnsiteCourseGUI.getValueAt(selectedRow, 1);
        int credits = (int) tableOnsiteCourseGUI.getValueAt(selectedRow, 2);
        String departmentName = (String) tableOnsiteCourseGUI.getValueAt(selectedRow, 3);
        DepartmentDTO department = onsiteCourseBUS.findByDepartmentName(departmentName);
        String location = (String) tableOnsiteCourseGUI.getValueAt(selectedRow, 4);
        String days = (String) tableOnsiteCourseGUI.getValueAt(selectedRow, 5);
        String timeString = (String) tableOnsiteCourseGUI.getValueAt(selectedRow, 6);
        LocalTime time = LocalTime.parse(timeString);

        txtTitle.setText(title);
        txtCredits.setText(String.valueOf(credits));
        cbbDepartment.setSelectedItem(department);
        txtLocation.setText(location);
        txtDays.setText(days);
        spnHour.setValue(time.getHour());
        spnMinutes.setValue(time.getMinute());
    }//GEN-LAST:event_tableOnClick


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<DepartmentDTO> cbbDepartment;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JSpinner spnHour;
    private javax.swing.JSpinner spnMinutes;
    private javax.swing.JTable tableOnsiteCourseGUI;
    private javax.swing.JTextField txtCredits;
    private javax.swing.JTextField txtDays;
    private javax.swing.JTextField txtLocation;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTitle;
    // End of variables declaration//GEN-END:variables
}
